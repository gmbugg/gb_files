#!/bin/bash
#docker-compose in /usr/bin/   root:root 755
#run docker-compose in a container
#this script will attempt to mirror the host paths by using volums for the following paths:
#  $(pwd)
#  $(dirname $COMPOSE_FILE) if it's set
#  $HOME if it's set
#you can add additional volumes (or any docker run options) using
#the $COMPOSE_OPTIONS environment variable
set -e
VERSION="1.24.0"
IMAGE="docker/compose:$VERSION"
#set options for connecting to docker host
if [ -z "$DOCKER_HOST" ]; then
  DOCKER_HOST="/var/run/docker.sock"
fi
if [ -S "$DOCKER_HOST" ]; then
  DOCKER_ADDR="-v $DOCKER_HOST:$DOCKER_HOST -e DOCKER_HOST"
else
  DOCKER_ADDR="-e $DOCKER_HOST -e $DOCKER_TLS_VERIFY -e DOCKER_CERT_PATH"
fi
#setup volume mounts for compose config and context
if [ "$(pwd)" != '/' ]; then
  VOLUMES="-v $(pwd):$(pwd)"
fi
if [ -n "$COMPOSE_FILE" ]; then
  COMPOSE_OPTIONS="$COMPOSE_OPTIONS -e COMPOSE_FILE=$COMPOSE_FILE"
  compose_dir=$(realpath $(dirname $COMPOSE_FILE))
fi
if [ -n "$compose_dir" ]; then
  VOLUMES="$VOLUMES -v $compose_dir:$compose_dir"
fi
if [ -n "$HOME" ]; then
  VOLUMES="$VOLUMES -v $HOME:$HOME -v $HOME:/root"  #mount $HOME in /root to share docker.config
fi
#only allocates tty if we detect one
if [ -t 0 -a -t 1 ]; then
  DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS -t"
fi
#always set -i to support piped & terminal input in run/exec
DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS -i"
#handle userns security
if [ ! -z "$(docker info 2>/dev/null | grep userns)" ]; then
  DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS --userns=host"
fi
exec docker run --rm $DOCKER_RUN_OPTIONS $DOCKER_ADDR $COMPOSE_OPTIONS $VOLUMES -w "$(pwd)" $IMAGE "$@"
